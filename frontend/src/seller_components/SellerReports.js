// src/components/SellerReports.js
import React, { useState } from 'react';
import './SellerReports.css';

const reportCategories = [
  { key: 'clients',      title: '–ö–ª–∏–µ–Ω—Ç—ã',             icon: 'üë•' },
  { key: 'medicines',    title: '–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã',         icon: 'üíä' },
  { key: 'ordersProd',   title: '–ó–∞–∫–∞–∑—ã/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', icon: 'üè≠' },
  { key: 'warehouse',    title: '–°–∫–ª–∞–¥',               icon: 'üì¶' }, // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
];

const clientReports = [
  { key: 'notPickedUp',   title: '–ö–ª–∏–µ–Ω—Ç—ã, –Ω–µ –∑–∞–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑' },
  { key: 'waitingStock',  title: '–ö–ª–∏–µ–Ω—Ç—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–±—ã—Ç–∏—è' },
  { key: 'orderedByDrug', title: '–ö–ª–∏–µ–Ω—Ç—ã, –∑–∞–∫–∞–∑—ã–≤–∞–≤—à–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ' },
  { key: 'topCustomers',  title: '–ß–∞—Å—Ç–æ –¥–µ–ª–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã' },
];

const medicineReports = [
  { key: 'topUsed',        title: '10 —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö' },
  { key: 'usageVolume',    title: '–û–±—ä—ë–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—á–µ–∫' },
  { key: 'criticalShort',  title: '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ' },
  { key: 'minStock',       title: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –Ω–∞ —Å–∫–ª–∞–¥–µ' },
  { key: 'priceBreakdown', title: '–¶–µ–Ω—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞' },
];

const orderProdReports = [
  { key: 'inProduction',   title: '–ó–∞–∫–∞–∑—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ' },
  { key: 'requiredDrugs',  title: '–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' },
  { key: 'techByType',     title: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ —Ç–∏–ø–∞–º' },
  { key: 'techByMeds',     title: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞–º' },
  { key: 'techInProd',     title: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ' },
];

const warehouseReports = [
  // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
];

export default function SellerReports() {
  const [activeCategory, setActiveCategory] = useState('clients');
  const [activeReport,   setActiveReport]   = useState(null);
  const [reportResult,   setReportResult]   = useState(null);
  const [isLoading,      setIsLoading]      = useState(false);

  // –û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const [typeId,          setTypeId]         = useState('');
  const [startDate,       setStartDate]      = useState('');
  const [endDate,         setEndDate]        = useState('');
  const [medicamentIds,   setMedicamentIds]  = useState('');
  const [typeIds,         setTypeIds]        = useState('');

  // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è usageVolume
  const [usageStart,      setUsageStart]     = useState('');
  const [usageEnd,        setUsageEnd]       = useState('');
  const [usageMedIds,     setUsageMedIds]    = useState('');

  // –§–∏–ª—å—Ç—Ä –¥–ª—è priceBreakdown
  const [packageMedicId,  setPackageMedicId] = useState('');

  // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è technologyByType / technologyByMeds
  const [techTypeIds,     setTechTypeIds]    = useState('');
  const [techMedIds,      setTechMedIds]     = useState('');

  const getReportsList = () => {
    switch (activeCategory) {
      case 'clients':      return clientReports;
      case 'medicines':    return medicineReports;
      case 'ordersProd':   return orderProdReports;
      case 'warehouse':    return warehouseReports;
      default:             return [];
    }
  };

  const fetchReport = async (reportKey) => {
    setReportResult(null);
    setIsLoading(true);

    try {
      // 1. notPickedUp
      if (reportKey === 'notPickedUp') {
        const resp = await fetch('/api/reports/notPickedUp');
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.customers,
          total: json.total,
        });

      // 2. waitingStock
      } else if (reportKey === 'waitingStock') {
        const url = typeId
          ? `/api/reports/waitingStock?typeId=${encodeURIComponent(typeId)}`
          : '/api/reports/waitingStock';
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 3. orderedByDrug
      } else if (reportKey === 'orderedByDrug') {
        const url = `/api/reports/orderedCustomers`
                  + `?startDate=${encodeURIComponent(startDate)}`
                  + `&endDate=${encodeURIComponent(endDate)}`
                  + `&medicamentIds=${encodeURIComponent(medicamentIds)}`
                  + `&typeIds=${encodeURIComponent(typeIds)}`;
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 4. topCustomers
      } else if (reportKey === 'topCustomers') {
        let url;
        if (typeId) {
          url = `/api/reports/topCustomers?typeId=${encodeURIComponent(typeId)}`;
        } else {
          url = `/api/reports/topCustomers?medicamentIds=${encodeURIComponent(medicamentIds)}`;
        }
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 5. topUsed
      } else if (reportKey === 'topUsed') {
        const url = typeId
          ? `/api/reports/topUsedDrugs?typeId=${encodeURIComponent(typeId)}`
          : '/api/reports/topUsedDrugs';
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 6. usageVolume
      } else if (reportKey === 'usageVolume') {
        const url = `/api/reports/usedVolume`
                  + `?startDate=${encodeURIComponent(usageStart)}`
                  + `&endDate=${encodeURIComponent(usageEnd)}`
                  + `&medicamentIds=${encodeURIComponent(usageMedIds)}`;
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows: json.rows,
        });

      // 7. criticalShort
      } else if (reportKey === 'criticalShort') {
        const resp = await fetch('/api/reports/criticalMedications');
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 8. minStock
      } else if (reportKey === 'minStock') {
        const url = typeId
          ? `/api/reports/minStock?typeId=${encodeURIComponent(typeId)}`
          : '/api/reports/minStock';
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 9. priceBreakdown ‚Üí –¥–≤–µ —á–∞—Å—Ç–∏: packagePrice –∏ componentCosts
      } else if (reportKey === 'priceBreakdown') {
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–∞–∫–µ—Ç–æ–≤, –∑–∞—Ç–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å)
        const pkgUrl = `/api/reports/packagePrice?medicamentId=${encodeURIComponent(packageMedicId)}`;
        const compUrl = `/api/reports/componentCosts?packageId=${encodeURIComponent(packageMedicId)}`;
        const [pkgResp, compResp] = await Promise.all([fetch(pkgUrl), fetch(compUrl)]);
        if (!pkgResp.ok || !compResp.ok) throw new Error('HTTP –æ—à–∏–±–∫–∞');
        const pkgJson = await pkgResp.json();
        const compJson = await compResp.json();
        setReportResult({
          packages: pkgJson.rows,
          components: compJson.rows
        });

      // 10. inProduction
      } else if (reportKey === 'inProduction') {
        const resp = await fetch('/api/reports/inProductionOrders');
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 11. requiredDrugs
      } else if (reportKey === 'requiredDrugs') {
        const resp = await fetch('/api/reports/requiredDrugs');
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({
          rows:  json.rows,
          total: json.total,
        });

      // 12. techByType / techByMeds / techInProd
      } else if (reportKey === 'techByType') {
        const url = `/api/reports/technologiesByType?typeIds=${encodeURIComponent(techTypeIds)}`;
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({ rows: json.rows });

      } else if (reportKey === 'techByMeds') {
        const url = `/api/reports/technologiesByMedicaments?medicamentIds=${encodeURIComponent(techMedIds)}`;
        const resp = await fetch(url);
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({ rows: json.rows });

      } else if (reportKey === 'techInProd') {
        const resp = await fetch('/api/reports/technologiesInProduction');
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        setReportResult({ rows: json.rows });

      } else {
        setReportResult({ error: '–ï—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' });
      }
    } catch (err) {
      console.error(err);
      setReportResult({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="reports-container">
      {/* 1) –°–µ–∫—Ü–∏—è —Ç–∞–±–æ–≤ */}
      <div className="reports-tabs">
        {reportCategories.map((cat) => (
          <button
            key={cat.key}
            className={`tab-item ${activeCategory === cat.key ? 'active' : ''}`}
            onClick={() => {
              setActiveCategory(cat.key);
              setActiveReport(null);
              setReportResult(null);
              // —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
              setTypeId('');
              setStartDate('');
              setEndDate('');
              setMedicamentIds('');
              setTypeIds('');
              setUsageStart('');
              setUsageEnd('');
              setUsageMedIds('');
              setPackageMedicId('');
              setTechTypeIds('');
              setTechMedIds('');
            }}
          >
            <span className="tab-icon">{cat.icon}</span>
            <span className="tab-text">{cat.title}</span>
          </button>
        ))}
      </div>

      {/* 2) –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫-–æ—Ç—á—ë—Ç–æ–≤ */}
      <div className="reports-list">
        {getReportsList().map((rep) => (
          <button
            key={rep.key}
            className={`report-item ${activeReport === rep.key ? 'selected' : ''}`}
            onClick={() => {
              setActiveReport(rep.key);
              setReportResult(null);
              fetchReport(rep.key);
            }}
          >
            {rep.title}
          </button>
        ))}
      </div>

      {/* 3) –§–∏–ª—å—Ç—Ä—ã */}

      {/* waitingStock */}
      {activeReport === 'waitingStock' && (
        <div className="filter-panel">
          <label>
            ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
            <input
              type="number"
              value={typeId}
              onChange={(e) => setTypeId(e.target.value)}
              placeholder="–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('waitingStock')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* orderedByDrug */}
      {activeReport === 'orderedByDrug' && (
        <div className="filter-panel-ordered">
          <label>
            –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞:
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
            />
          </label>
          <label>
            –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞:
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
            />
          </label>
          <label>
            ID –ª–µ–∫–∞—Ä—Å—Ç–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
            <input
              type="text"
              value={medicamentIds}
              onChange={(e) => setMedicamentIds(e.target.value)}
              placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3"
            />
          </label>
          <label>
            ID —Ç–∏–ø–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
            <input
              type="text"
              value={typeIds}
              onChange={(e) => setTypeIds(e.target.value)}
              placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 4,5"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('orderedByDrug')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* topCustomers */}
      {activeReport === 'topCustomers' && (
        <div className="filter-panel-top">
          <label>
            ID —Ç–∏–ø–∞:
            <input
              type="number"
              value={typeId}
              onChange={(e) => setTypeId(e.target.value)}
              placeholder="–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤"
            />
          </label>
          <label>
            ID –ª–µ–∫–∞—Ä—Å—Ç–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
            <input
              type="text"
              value={medicamentIds}
              onChange={(e) => setMedicamentIds(e.target.value)}
              placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('topCustomers')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* topUsed */}
      {activeReport === 'topUsed' && (
        <div className="filter-panel-topUsed">
          <label>
            ID —Ç–∏–ø–∞:
            <input
              type="number"
              value={typeId}
              onChange={(e) => setTypeId(e.target.value)}
              placeholder="–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('topUsed')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* usageVolume */}
      {activeReport === 'usageVolume' && (
        <div className="filter-panel-usage">
          <label>
            –ù–∞—á–∞–ª–æ:
            <input
              type="date"
              value={usageStart}
              onChange={(e) => setUsageStart(e.target.value)}
            />
          </label>
          <label>
            –ö–æ–Ω–µ—Ü:
            <input
              type="date"
              value={usageEnd}
              onChange={(e) => setUsageEnd(e.target.value)}
            />
          </label>
          <label>
            ID –ª–µ–∫–∞—Ä—Å—Ç–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
            <input
              type="text"
              value={usageMedIds}
              onChange={(e) => setUsageMedIds(e.target.value)}
              placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('usageVolume')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* criticalShort */}
      {activeReport === 'criticalShort' && (
        <p>–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–º–µ–Ω–∏—Ç—å¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫.</p>
      )}

      {/* minStock */}
      {activeReport === 'minStock' && (
        <div className="filter-panel">
          <label>
            ID —Ç–∏–ø–∞:
            <input
              type="number"
              value={typeId}
              onChange={(e) => setTypeId(e.target.value)}
              placeholder="–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('minStock')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* priceBreakdown */}
      {activeReport === 'priceBreakdown' && (
        <div className="filter-panel">
          <label>
            ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:
            <input
              type="number"
              value={packageMedicId}
              onChange={(e) => setPackageMedicId(e.target.value)}
              placeholder="ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 32)"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('priceBreakdown')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* inProduction */}
      {activeReport === 'inProduction' && (
        <p>–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç—á—ë—Ç–∞.</p>
      )}

      {/* requiredDrugs */}
      {activeReport === 'requiredDrugs' && (
        <p>–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç—á—ë—Ç–∞.</p>
      )}

      {/* techByType */}
      {activeReport === 'techByType' && (
        <div className="filter-panel">
          <label>
            ID —Ç–∏–ø–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
            <input
              type="text"
              value={techTypeIds}
              onChange={(e) => setTechTypeIds(e.target.value)}
              placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('techByType')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* techByMeds */}
      {activeReport === 'techByMeds' && (
        <div className="filter-panel">
          <label>
            ID –ª–µ–∫–∞—Ä—Å—Ç–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
            <input
              type="text"
              value={techMedIds}
              onChange={(e) => setTechMedIds(e.target.value)}
              placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: 5,7"
            />
          </label>
          <button className="apply-filter-btn" onClick={() => fetchReport('techByMeds')}>
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      )}

      {/* techInProd */}
      {activeReport === 'techInProd' && (
        <p>–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç—á—ë—Ç–∞.</p>
      )}

      {/* 4) –ë–ª–æ–∫ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      <div className="reports-result">
        {activeReport === null ? (
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</p>

        ) : isLoading ? (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö‚Ä¶</p>

        ) : reportResult && reportResult.error ? (
          <p className="error">{reportResult.error}</p>

        ) : activeReport === 'notPickedUp' && reportResult ? (
          <>
            <h3>–í—Å–µ–≥–æ ¬´–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö¬ª –∫–ª–∏–µ–Ω—Ç–æ–≤: {reportResult.total}</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞</th>
                  <th>–§–ò–û</th>
                  <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                  <th>–ê–¥—Ä–µ—Å</th>
                  <th>–ö–æ–¥ –∑–∞–∫–∞–∑–∞</th>
                  <th>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="6" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.orderId}>
                      <td>{r.customerId}</td>
                      <td>{r.fullName}</td>
                      <td>{r.phoneNumber}</td>
                      <td>{r.address}</td>
                      <td>{r.orderId}</td>
                      <td>{new Date(r.appointedDatetime).toLocaleString('ru-RU')}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'waitingStock' && reportResult ? (
          <>
            <h3>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–±—ã—Ç–∏—è: {reportResult.total}</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞</th>
                  <th>–§–ò–û</th>
                  <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                  <th>–ê–¥—Ä–µ—Å</th>
                  <th>–ö–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏</th>
                  <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="7" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–±—ã—Ç–∏—è
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r, idx) => (
                    <tr key={`${r.customerId}-${idx}`}>
                      <td>{r.customerId}</td>
                      <td>{r.customerName}</td>
                      <td>{r.phoneNumber}</td>
                      <td>{r.address}</td>
                      <td>{r.packageId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.waitingAmount}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'orderedByDrug' && reportResult ? (
          <>
            <h3>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞–∫–∞–∑—ã–≤–∞–≤—à–∏—Ö: {reportResult.total}</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞</th>
                  <th>–§–ò–û</th>
                  <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                  <th>–ê–¥—Ä–µ—Å</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="4" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.customerId}>
                      <td>{r.customerId}</td>
                      <td>{r.customerName}</td>
                      <td>{r.phoneNumber}</td>
                      <td>{r.address}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'topCustomers' && reportResult ? (
          <>
            <h3>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, —á–∞—Å—Ç–æ –¥–µ–ª–∞—é—â–∏—Ö –∑–∞–∫–∞–∑—ã: {reportResult.total}</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞</th>
                  <th>–§–ò–û</th>
                  <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                  <th>–ê–¥—Ä–µ—Å</th>
                  <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="5" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.customerId}>
                      <td>{r.customerId}</td>
                      <td>{r.customerName}</td>
                      <td>{r.phoneNumber}</td>
                      <td>{r.address}</td>
                      <td>{r.ordersCount}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'topUsed' && reportResult ? (
          <>
            <h3>–¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤ ({reportResult.total})</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–ò–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.medicamentId}>
                      <td>{r.medicamentId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.usageScore}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'usageVolume' && reportResult ? (
          <>
            <h3>–û–±—ä—ë–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—á–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—á–µ–∫</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.medicamentId}>
                      <td>{r.medicamentId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.totalPackagesUsed}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'criticalShort' && reportResult ? (
          <>
            <h3>–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ ({reportResult.total})</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th>–¢–∏–ø</th>
                  <th>–î–æ—Å—Ç—É–ø–Ω–æ</th>
                  <th>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="5" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.medicamentId}>
                      <td>{r.medicamentId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.medicamentType}</td>
                      <td>{r.availableAmount}</td>
                      <td>{r.criticalAmount}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'minStock' && reportResult ? (
          <>
            <h3>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å ({reportResult.total})</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th>–î–æ—Å—Ç—É–ø–Ω–æ</th>
                  <th>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ (–æ–±—â–∏–π/–≤ —Ç–∏–ø–µ)</th>
                  <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –º–∏–Ω–∏–º—É–º–µ</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="5" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –∑–∞–ø–∞—Å–µ
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.medicamentId}>
                      <td>{r.medicamentId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.availableAmount}</td>
                      {typeId
                        ? <>
                            <td>{r.minimalInType}</td>
                            <td>{r.countAtMinimumInType}</td>
                          </>
                        : <>
                            <td>{r.minimalOverall}</td>
                            <td>{r.countAtMinimum}</td>
                          </>
                      }
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'priceBreakdown' && reportResult ? (
          <>
            <h3>–¶–µ–Ω—ã –ø–∞–∫–µ—Ç–æ–≤ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h3>
            <div className="price-section">
              <h4>–ü–∞–∫–µ—Ç—ã:</h4>
              <table className="result-table">
                <thead>
                  <tr>
                    <th>–ö–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏</th>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                    <th>–¶–µ–Ω–∞</th>
                  </tr>
                </thead>
                <tbody>
                  {reportResult.packages.length === 0 ? (
                    <tr>
                      <td colSpan="3" style={{ textAlign: 'center', color: '#64748b' }}>
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –ø–∞–∫–µ—Ç–æ–≤
                      </td>
                    </tr>
                  ) : (
                    reportResult.packages.map((r) => (
                      <tr key={r.packageId}>
                        <td>{r.packageId}</td>
                        <td>{r.medicamentName}</td>
                        <td>{r.price}</td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
              <h4>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</h4>
              <table className="result-table">
                <thead>
                  <tr>
                    <th>–ö–æ–¥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</th>
                    <th>–ö–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</th>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</th>
                    <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
                    <th>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</th>
                    <th>–í—ã–ø—É—â–µ–Ω–æ –ø–∞—á–µ–∫</th>
                    <th>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –ø–∞—á–∫–∏</th>
                  </tr>
                </thead>
                <tbody>
                  {reportResult.components.length === 0 ? (
                    <tr>
                      <td colSpan="8" style={{ textAlign: 'center', color: '#64748b' }}>
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
                      </td>
                    </tr>
                  ) : (
                    reportResult.components.map((r) => (
                      <tr key={`${r.technologyId}-${r.componentPackageId}`}>
                        <td>{r.technologyId}</td>
                        <td>{r.componentPackageId}</td>
                        <td>{r.componentMedicamentName}</td>
                        <td>{r.componentAmount}</td>
                        <td>{r.componentPrice}</td>
                        <td>{r.componentTotalCost}</td>
                        <td>{r.producedPackages}</td>
                        <td>{r.costPerOnePackage}</td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </>
        ) : activeReport === 'inProduction' && reportResult ? (
          <>
            <h3>–ó–∞–∫–∞–∑—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ: {reportResult.total}</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –∑–∞–∫–∞–∑–∞</th>
                  <th>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                  <th>–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞</th>
                  <th>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</th>
                  <th>–ö–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</th>
                  <th>–ù–∞—á–∞–ª–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="6" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.productionId}>
                      <td>{r.orderId}</td>
                      <td>{new Date(r.registrationDatetime).toLocaleString('ru-RU')}</td>
                      <td>{r.customerId}</td>
                      <td>{r.customerName}</td>
                      <td>{r.productionId}</td>
                      <td>{new Date(r.startTime).toLocaleString('ru-RU')}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'requiredDrugs' && reportResult ? (
          <>
            <h3>–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã, —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {reportResult.total}</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th>–¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—á–µ–∫</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.medicamentId}>
                      <td>{r.medicamentId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.totalRequiredPacks}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'techByType' && reportResult ? (
          <>
            <h3>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ —Ç–∏–ø–∞–º –ª–µ–∫–∞—Ä—Å—Ç–≤</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</th>
                  <th>–ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</th>
                  <th>–ö–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–¢–∏–ø –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–í—Ä–µ–º—è (–º–∏–Ω)</th>
                  <th>–ö–æ–ª-–≤–æ –∑–∞ —Ä–∞–∑</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="7" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–∞–º
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.technologyId}>
                      <td>{r.technologyId}</td>
                      <td>{r.preparationMethod}</td>
                      <td>{r.packageId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.medicamentType}</td>
                      <td>{r.prepTimeMinutes}</td>
                      <td>{r.amountPerBatch}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'techByMeds' && reportResult ? (
          <>
            <h3>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</th>
                  <th>–ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</th>
                  <th>–ö–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–¢–∏–ø –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–í—Ä–µ–º—è (–º–∏–Ω)</th>
                  <th>–ö–æ–ª-–≤–æ –∑–∞ —Ä–∞–∑</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="7" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞–º
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.technologyId}>
                      <td>{r.technologyId}</td>
                      <td>{r.preparationMethod}</td>
                      <td>{r.packageId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.medicamentType}</td>
                      <td>{r.prepTimeMinutes}</td>
                      <td>{r.amountPerBatch}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : activeReport === 'techInProd' && reportResult ? (
          <>
            <h3>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</h3>
            <table className="result-table">
              <thead>
                <tr>
                  <th>–ö–æ–¥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</th>
                  <th>–ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</th>
                  <th>–ö–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–¢–∏–ø –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞</th>
                  <th>–í—Ä–µ–º—è (–º–∏–Ω)</th>
                  <th>–ö–æ–ª-–≤–æ –∑–∞ —Ä–∞–∑</th>
                </tr>
              </thead>
              <tbody>
                {reportResult.rows.length === 0 ? (
                  <tr>
                    <td colSpan="7" style={{ textAlign: 'center', color: '#64748b' }}>
                      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
                    </td>
                  </tr>
                ) : (
                  reportResult.rows.map((r) => (
                    <tr key={r.technologyId}>
                      <td>{r.technologyId}</td>
                      <td>{r.preparationMethod}</td>
                      <td>{r.packageId}</td>
                      <td>{r.medicamentName}</td>
                      <td>{r.medicamentType}</td>
                      <td>{r.prepTimeMinutes}</td>
                      <td>{r.amountPerBatch}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </>
        ) : null}
      </div>
    </div>
  );
}
